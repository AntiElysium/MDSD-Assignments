/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.Div
import dk.sdu.mmmi.mdsd.math.LetBinding
import dk.sdu.mmmi.mdsd.math.MathExp
import dk.sdu.mmmi.mdsd.math.MathNumber
import dk.sdu.mmmi.mdsd.math.Minus
import dk.sdu.mmmi.mdsd.math.Mult
import dk.sdu.mmmi.mdsd.math.Plus
import dk.sdu.mmmi.mdsd.math.VarBinding
import dk.sdu.mmmi.mdsd.math.VariableUse
import java.util.HashMap
import java.util.Map
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.math.Program
import dk.sdu.mmmi.mdsd.math.External
import dk.sdu.mmmi.mdsd.math.Expression
import dk.sdu.mmmi.mdsd.math.Parentheses
import dk.sdu.mmmi.mdsd.math.Binding
import dk.sdu.mmmi.mdsd.math.Method

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {
	
	static Map<String, Integer> variables;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		/*val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		result.displayPanel*/
		
		val p = resource.allContents.filter(Program).next
		fsa.generateFile("math_expression/" + p.name + ".java", p.compile)
	}
	
	
	def compile(Program program){
		'''
		package math_expression;
		
		public class «program.name» {
			«FOR mathExp: program.mathExps»
			«FOR varBinding: mathExp.variables»
			public int «varBinding.name»;
			«ENDFOR»
			«ENDFOR»
			
			public void compute() {
				«FOR mathExp: program.mathExps»
				«FOR varBinding: mathExp.variables»
				«varBinding.name» = «varBinding.expression.resolve»;
				«ENDFOR»
				«ENDFOR»
			}
			
			«IF !program.externals.empty»
			private External external;	
			
			public «program.name»(External external){
				this.external = external;
			}
			
			interface External {		
			«ENDIF»
			«FOR external : program.externals»
				public int «external.name» («external.listAll»)
			«ENDFOR»
			}
		}
		'''
	}
	
	def String resolve(Expression expression){
		var output = ""
		switch (expression) {
			MathNumber: output += expression.value
			Parentheses: output += '''( «expression.exp.resolve» )'''
			VariableUse: output += expression.ref.resolveBinding
			Method: output += '''this.external.«expression.ref.name»(«expression.listAllExpressions»)'''
		}
		return output
	}
	
	def String resolveBinding(Binding binding) {
		switch (binding) {
			VarBinding: '''«binding.name» = «binding.expression.resolve»'''
			LetBinding: 
		}
	}
	
	def String listAllExpressions(Method method){
		var output = ""
		for(exp : method.exps){
			output += exp + ", "
		}
		output.substring(0, output.length - 3)
		return output
	}
	
	def String listAll(External external) {
		var output = ""
		for(arg : external.args){
			output += arg + ", "
		}
		output.substring(0, output.length - 3)
		return output
	}
	
	
	
	//Old sheit
	def void displayPanel(Map<String, Integer> result) {
		var resultString = ""
		for (entry : result.entrySet()) {
         	resultString += "var " + entry.getKey() + " = " + entry.getValue() + "\n"
        }
		
		JOptionPane.showMessageDialog(null, resultString ,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
	
	def static compute(MathExp math) {
		variables = new HashMap()
		for(varBinding: math.variables)
			varBinding.computeExpression()
		variables
	}
	
	def static dispatch int computeExpression(VarBinding binding) {
		variables.put(binding.name, binding.expression.computeExpression())
		return variables.get(binding.name)
	}
	
	def static dispatch int computeExpression(MathNumber exp) {
		exp.value
	}

	def static dispatch int computeExpression(Plus exp) {
		exp.left.computeExpression + exp.right.computeExpression
	}
	
	def static dispatch int computeExpression(Minus exp) {
		exp.left.computeExpression - exp.right.computeExpression
	}
	
	def static dispatch int computeExpression(Mult exp) {
		exp.left.computeExpression * exp.right.computeExpression
	}
	
	def static dispatch int computeExpression(Div exp) {
		exp.left.computeExpression / exp.right.computeExpression
	}

	def static dispatch int computeExpression(LetBinding exp) {
		exp.body.computeExpression
	}
	
	def static dispatch int computeExpression(VariableUse exp) {
		exp.ref.computeBinding
	}

	def static dispatch int computeBinding(VarBinding binding){
		if(!variables.containsKey(binding.name))
			binding.computeExpression()			
		variables.get(binding.name)
	}
	
	def static dispatch int computeBinding(LetBinding binding){
		binding.binding.computeExpression
	}
	
}
