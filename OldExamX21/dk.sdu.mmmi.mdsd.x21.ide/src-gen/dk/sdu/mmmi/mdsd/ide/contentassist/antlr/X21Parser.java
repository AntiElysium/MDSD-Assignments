/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import dk.sdu.mmmi.mdsd.ide.contentassist.antlr.internal.InternalX21Parser;
import dk.sdu.mmmi.mdsd.services.X21GrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class X21Parser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(X21GrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, X21GrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
			builder.put(grammarAccess.getNodeAccess().getAlternatives_3(), "rule__Node__Alternatives_3");
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getElementAccess().getAlternatives_1_1(), "rule__Element__Alternatives_1_1");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getPlusMinusAccess().getAlternatives_1_0(), "rule__PlusMinus__Alternatives_1_0");
			builder.put(grammarAccess.getMulDivAccess().getAlternatives_1_0(), "rule__MulDiv__Alternatives_1_0");
			builder.put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
			builder.put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
			builder.put(grammarAccess.getLogicExpAccess().getOperatorAlternatives_1_0(), "rule__LogicExp__OperatorAlternatives_1_0");
			builder.put(grammarAccess.getX21Access().getGroup(), "rule__X21__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getLambdaAccess().getGroup(), "rule__Lambda__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
			builder.put(grammarAccess.getStreamAccess().getGroup(), "rule__Stream__Group__0");
			builder.put(grammarAccess.getStreamAccess().getGroup_2(), "rule__Stream__Group_2__0");
			builder.put(grammarAccess.getStreamAccess().getGroup_3(), "rule__Stream__Group_3__0");
			builder.put(grammarAccess.getStreamAccess().getGroup_3_2(), "rule__Stream__Group_3_2__0");
			builder.put(grammarAccess.getElementAccess().getGroup_1(), "rule__Element__Group_1__0");
			builder.put(grammarAccess.getElementAccess().getGroup_2(), "rule__Element__Group_2__0");
			builder.put(grammarAccess.getDataDeclAccess().getGroup(), "rule__DataDecl__Group__0");
			builder.put(grammarAccess.getDataDeclAccess().getGroup_6(), "rule__DataDecl__Group_6__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup(), "rule__PlusMinus__Group__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1(), "rule__PlusMinus__Group_1__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1_0_0(), "rule__PlusMinus__Group_1_0_0__0");
			builder.put(grammarAccess.getPlusMinusAccess().getGroup_1_0_1(), "rule__PlusMinus__Group_1_0_1__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup(), "rule__MulDiv__Group__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1(), "rule__MulDiv__Group_1__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1_0_0(), "rule__MulDiv__Group_1_0_0__0");
			builder.put(grammarAccess.getMulDivAccess().getGroup_1_0_1(), "rule__MulDiv__Group_1_0_1__0");
			builder.put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
			builder.put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
			builder.put(grammarAccess.getLetBindingAccess().getGroup(), "rule__LetBinding__Group__0");
			builder.put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
			builder.put(grammarAccess.getLogicExpAccess().getGroup(), "rule__LogicExp__Group__0");
			builder.put(grammarAccess.getParameterStatementAccess().getGroup(), "rule__ParameterStatement__Group__0");
			builder.put(grammarAccess.getParameterStatementAccess().getGroup_1(), "rule__ParameterStatement__Group_1__0");
			builder.put(grammarAccess.getNewStatementAccess().getGroup(), "rule__NewStatement__Group__0");
			builder.put(grammarAccess.getNewStatementAccess().getGroup_6(), "rule__NewStatement__Group_6__0");
			builder.put(grammarAccess.getX21Access().getNameAssignment_1(), "rule__X21__NameAssignment_1");
			builder.put(grammarAccess.getX21Access().getDeclarationsAssignment_2(), "rule__X21__DeclarationsAssignment_2");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_3(), "rule__Parameter__TypeAssignment_3");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
			builder.put(grammarAccess.getFunctionAccess().getLambdaAssignment_2(), "rule__Function__LambdaAssignment_2");
			builder.put(grammarAccess.getLambdaAccess().getNameAssignment_1(), "rule__Lambda__NameAssignment_1");
			builder.put(grammarAccess.getLambdaAccess().getTypeAssignment_3(), "rule__Lambda__TypeAssignment_3");
			builder.put(grammarAccess.getLambdaAccess().getExpAssignment_6(), "rule__Lambda__ExpAssignment_6");
			builder.put(grammarAccess.getInputAccess().getNameAssignment_1(), "rule__Input__NameAssignment_1");
			builder.put(grammarAccess.getInputAccess().getTypeAssignment_3(), "rule__Input__TypeAssignment_3");
			builder.put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
			builder.put(grammarAccess.getNodeAccess().getFunctionAssignment_3_0(), "rule__Node__FunctionAssignment_3_0");
			builder.put(grammarAccess.getNodeAccess().getLambdaAssignment_3_1(), "rule__Node__LambdaAssignment_3_1");
			builder.put(grammarAccess.getStreamAccess().getNameAssignment_1(), "rule__Stream__NameAssignment_1");
			builder.put(grammarAccess.getStreamAccess().getInputsAssignment_2_1(), "rule__Stream__InputsAssignment_2_1");
			builder.put(grammarAccess.getStreamAccess().getElementsAssignment_3_1(), "rule__Stream__ElementsAssignment_3_1");
			builder.put(grammarAccess.getStreamAccess().getElementsAssignment_3_2_1(), "rule__Stream__ElementsAssignment_3_2_1");
			builder.put(grammarAccess.getElementAccess().getNodeNameAssignment_0(), "rule__Element__NodeNameAssignment_0");
			builder.put(grammarAccess.getElementAccess().getFunctionAssignment_1_1_0(), "rule__Element__FunctionAssignment_1_1_0");
			builder.put(grammarAccess.getElementAccess().getLambdaAssignment_1_1_1(), "rule__Element__LambdaAssignment_1_1_1");
			builder.put(grammarAccess.getElementAccess().getOutputNameAssignment_2_1(), "rule__Element__OutputNameAssignment_2_1");
			builder.put(grammarAccess.getDataDeclAccess().getNameAssignment_1(), "rule__DataDecl__NameAssignment_1");
			builder.put(grammarAccess.getDataDeclAccess().getDeclNamesAssignment_3(), "rule__DataDecl__DeclNamesAssignment_3");
			builder.put(grammarAccess.getDataDeclAccess().getTypesAssignment_5(), "rule__DataDecl__TypesAssignment_5");
			builder.put(grammarAccess.getDataDeclAccess().getDeclNamesAssignment_6_1(), "rule__DataDecl__DeclNamesAssignment_6_1");
			builder.put(grammarAccess.getDataDeclAccess().getTypesAssignment_6_3(), "rule__DataDecl__TypesAssignment_6_3");
			builder.put(grammarAccess.getPlusMinusAccess().getRightAssignment_1_1(), "rule__PlusMinus__RightAssignment_1_1");
			builder.put(grammarAccess.getMulDivAccess().getRightAssignment_1_1(), "rule__MulDiv__RightAssignment_1_1");
			builder.put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2(), "rule__Primary__ExpressionAssignment_1_2");
			builder.put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
			builder.put(grammarAccess.getLetBindingAccess().getNameAssignment_1(), "rule__LetBinding__NameAssignment_1");
			builder.put(grammarAccess.getLetBindingAccess().getBindingAssignment_3(), "rule__LetBinding__BindingAssignment_3");
			builder.put(grammarAccess.getLetBindingAccess().getBodyAssignment_5(), "rule__LetBinding__BodyAssignment_5");
			builder.put(grammarAccess.getIfStatementAccess().getStatementAssignment_1(), "rule__IfStatement__StatementAssignment_1");
			builder.put(grammarAccess.getIfStatementAccess().getTrueExpressionAssignment_3(), "rule__IfStatement__TrueExpressionAssignment_3");
			builder.put(grammarAccess.getIfStatementAccess().getFalseExpressionAssignment_5(), "rule__IfStatement__FalseExpressionAssignment_5");
			builder.put(grammarAccess.getLogicExpAccess().getLeftAssignment_0(), "rule__LogicExp__LeftAssignment_0");
			builder.put(grammarAccess.getLogicExpAccess().getOperatorAssignment_1(), "rule__LogicExp__OperatorAssignment_1");
			builder.put(grammarAccess.getLogicExpAccess().getRightAssignment_2(), "rule__LogicExp__RightAssignment_2");
			builder.put(grammarAccess.getParameterStatementAccess().getObjNameAssignment_0(), "rule__ParameterStatement__ObjNameAssignment_0");
			builder.put(grammarAccess.getParameterStatementAccess().getParamNamesAssignment_1_1(), "rule__ParameterStatement__ParamNamesAssignment_1_1");
			builder.put(grammarAccess.getNewStatementAccess().getCustomNameAssignment_1(), "rule__NewStatement__CustomNameAssignment_1");
			builder.put(grammarAccess.getNewStatementAccess().getParamNamesAssignment_3(), "rule__NewStatement__ParamNamesAssignment_3");
			builder.put(grammarAccess.getNewStatementAccess().getParamValuesAssignment_5(), "rule__NewStatement__ParamValuesAssignment_5");
			builder.put(grammarAccess.getNewStatementAccess().getParamNamesAssignment_6_1(), "rule__NewStatement__ParamNamesAssignment_6_1");
			builder.put(grammarAccess.getNewStatementAccess().getParamValuesAssignment_6_3(), "rule__NewStatement__ParamValuesAssignment_6_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private X21GrammarAccess grammarAccess;

	@Override
	protected InternalX21Parser createParser() {
		InternalX21Parser result = new InternalX21Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public X21GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(X21GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
