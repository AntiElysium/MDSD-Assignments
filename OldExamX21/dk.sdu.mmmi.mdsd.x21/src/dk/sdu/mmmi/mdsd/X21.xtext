grammar dk.sdu.mmmi.mdsd.X21 with org.eclipse.xtext.common.Terminals

generate x21 "http://www.sdu.dk/mmmi/mdsd/X21"

X21:
	'program' name=ID declarations+=Declaration*
;

Declaration:
	Function | Input | Node | Stream | DataDecl | Parameter
;

Parameter:
	'parameter' name=ID ':' type=Type
;

Function:
	'function' name=ID lambda=Lambda
;

Lambda:
	'(' name=ID ':' type=Type ')' '{' exp=Exp '}'
;

Input:
	'input' name=ID ':' type=Type
;

Node:
	'node' name=ID '[' (function=ID | lambda=Lambda) ']'
;

/*
 * Node:
 *  'node' name=ID body=FunctionOrLambda
 * ;
 * 
 * FunctionOrLambda:
 *  '[' ({FunctionReference} ref=[Function] | Lambda) ']'
 * ;
 */

Stream:
	'stream' name=ID (',' inputs+=ID)* ('to' elements+=Element (',' elements+=Element)*)+
;

Element:
	nodeName=ID | '[' (function=ID | Lambda=Lambda) ']' | 'output' outputName=ID
;

DataDecl:
	'data' name=ID '{' declNames+=ID ':' types+=Type (',' declNames+=ID ':' types+=Type)* '}'
;

Type:
	'int' | 'string' | ID
;

Exp:
	PlusMinus
;

PlusMinus returns Expression:
	MulDiv (( {Plus.left=current} '+' | {Minus.left=current} '-') right=MulDiv)*
;

MulDiv returns Expression:
	Primary (({Mult.left=current} '*' | {Div.left=current} '/') right=Primary)*
;

Primary returns Expression:
	Atomic | {Parenthesis} '(' expression=Exp ')'
;

Atomic:
	{IntValue} value=INT | LetBinding | {None} 'none' | IfStatement | NewStatement | ParameterStatement
;

LetBinding:
	'let' name=ID '=' binding=Exp 'in' body=Exp 'end'
;

IfStatement:
	'if' statement=LogicExp 'then' trueExpression=Exp 'else' falseExpression=Exp 'end'
;

LogicExp:
	left=Exp operator=('=' | '<' | '>' | '<=' | '>=') right=Exp 
;

ParameterStatement:
	objName=ID ('.' paramNames+=ID)*
;

NewStatement:
	'new' customName=ID '[' paramNames+=ID '=' paramValues+=Exp (',' paramNames+=ID '=' paramValues+=Exp)* ']'
;