/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.x21.impl;

import dk.sdu.mmmi.mdsd.x21.Exp;
import dk.sdu.mmmi.mdsd.x21.IfStatement;
import dk.sdu.mmmi.mdsd.x21.LogicExp;
import dk.sdu.mmmi.mdsd.x21.X21Package;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.mmmi.mdsd.x21.impl.IfStatementImpl#getStatement <em>Statement</em>}</li>
 *   <li>{@link dk.sdu.mmmi.mdsd.x21.impl.IfStatementImpl#getTrueExpression <em>True Expression</em>}</li>
 *   <li>{@link dk.sdu.mmmi.mdsd.x21.impl.IfStatementImpl#getFalseExpression <em>False Expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfStatementImpl extends AtomicImpl implements IfStatement
{
  /**
   * The cached value of the '{@link #getStatement() <em>Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatement()
   * @generated
   * @ordered
   */
  protected LogicExp statement;

  /**
   * The cached value of the '{@link #getTrueExpression() <em>True Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTrueExpression()
   * @generated
   * @ordered
   */
  protected Exp trueExpression;

  /**
   * The cached value of the '{@link #getFalseExpression() <em>False Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFalseExpression()
   * @generated
   * @ordered
   */
  protected Exp falseExpression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return X21Package.Literals.IF_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicExp getStatement()
  {
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStatement(LogicExp newStatement, NotificationChain msgs)
  {
    LogicExp oldStatement = statement;
    statement = newStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, X21Package.IF_STATEMENT__STATEMENT, oldStatement, newStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStatement(LogicExp newStatement)
  {
    if (newStatement != statement)
    {
      NotificationChain msgs = null;
      if (statement != null)
        msgs = ((InternalEObject)statement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - X21Package.IF_STATEMENT__STATEMENT, null, msgs);
      if (newStatement != null)
        msgs = ((InternalEObject)newStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - X21Package.IF_STATEMENT__STATEMENT, null, msgs);
      msgs = basicSetStatement(newStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, X21Package.IF_STATEMENT__STATEMENT, newStatement, newStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getTrueExpression()
  {
    return trueExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTrueExpression(Exp newTrueExpression, NotificationChain msgs)
  {
    Exp oldTrueExpression = trueExpression;
    trueExpression = newTrueExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, X21Package.IF_STATEMENT__TRUE_EXPRESSION, oldTrueExpression, newTrueExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTrueExpression(Exp newTrueExpression)
  {
    if (newTrueExpression != trueExpression)
    {
      NotificationChain msgs = null;
      if (trueExpression != null)
        msgs = ((InternalEObject)trueExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - X21Package.IF_STATEMENT__TRUE_EXPRESSION, null, msgs);
      if (newTrueExpression != null)
        msgs = ((InternalEObject)newTrueExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - X21Package.IF_STATEMENT__TRUE_EXPRESSION, null, msgs);
      msgs = basicSetTrueExpression(newTrueExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, X21Package.IF_STATEMENT__TRUE_EXPRESSION, newTrueExpression, newTrueExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exp getFalseExpression()
  {
    return falseExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFalseExpression(Exp newFalseExpression, NotificationChain msgs)
  {
    Exp oldFalseExpression = falseExpression;
    falseExpression = newFalseExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, X21Package.IF_STATEMENT__FALSE_EXPRESSION, oldFalseExpression, newFalseExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFalseExpression(Exp newFalseExpression)
  {
    if (newFalseExpression != falseExpression)
    {
      NotificationChain msgs = null;
      if (falseExpression != null)
        msgs = ((InternalEObject)falseExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - X21Package.IF_STATEMENT__FALSE_EXPRESSION, null, msgs);
      if (newFalseExpression != null)
        msgs = ((InternalEObject)newFalseExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - X21Package.IF_STATEMENT__FALSE_EXPRESSION, null, msgs);
      msgs = basicSetFalseExpression(newFalseExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, X21Package.IF_STATEMENT__FALSE_EXPRESSION, newFalseExpression, newFalseExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case X21Package.IF_STATEMENT__STATEMENT:
        return basicSetStatement(null, msgs);
      case X21Package.IF_STATEMENT__TRUE_EXPRESSION:
        return basicSetTrueExpression(null, msgs);
      case X21Package.IF_STATEMENT__FALSE_EXPRESSION:
        return basicSetFalseExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case X21Package.IF_STATEMENT__STATEMENT:
        return getStatement();
      case X21Package.IF_STATEMENT__TRUE_EXPRESSION:
        return getTrueExpression();
      case X21Package.IF_STATEMENT__FALSE_EXPRESSION:
        return getFalseExpression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case X21Package.IF_STATEMENT__STATEMENT:
        setStatement((LogicExp)newValue);
        return;
      case X21Package.IF_STATEMENT__TRUE_EXPRESSION:
        setTrueExpression((Exp)newValue);
        return;
      case X21Package.IF_STATEMENT__FALSE_EXPRESSION:
        setFalseExpression((Exp)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case X21Package.IF_STATEMENT__STATEMENT:
        setStatement((LogicExp)null);
        return;
      case X21Package.IF_STATEMENT__TRUE_EXPRESSION:
        setTrueExpression((Exp)null);
        return;
      case X21Package.IF_STATEMENT__FALSE_EXPRESSION:
        setFalseExpression((Exp)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case X21Package.IF_STATEMENT__STATEMENT:
        return statement != null;
      case X21Package.IF_STATEMENT__TRUE_EXPRESSION:
        return trueExpression != null;
      case X21Package.IF_STATEMENT__FALSE_EXPRESSION:
        return falseExpression != null;
    }
    return super.eIsSet(featureID);
  }

} //IfStatementImpl
